{"version":3,"sources":["modules/todos.js","components/TodoHead.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/TodoCreate.jsx","components/TodoTemplate.jsx","containers/TodoContainer.jsx","App.js","modules/index.js","index.js"],"names":["changeInput","createAction","input","id","insert","text","done","toggle","remove","todos","handleActions","state","payload","todo","concat","map","filter","TodoHeadBlock","styled","div","TodoDate","h1","TodoDay","TodoTasks","TodoHead","unDoneTasks","today","Date","dayString","toLocaleDateString","year","month","day","dayName","weekday","Remove","TodoItemBlock","CheckCircle","props","css","Text","TodoItem","onToggle","onRemove","onClick","TodoListBlock","TodoList","key","TodoCreateBlock","InsertFormBlock","InsertForm","form","Input","CircleButton","button","openInsertForm","TodoCreate","onSubmit","value","onChange","useState","setOpenInsertForm","autoFocus","placeholder","TodoTemplateBlock","TodoTemplate","onChangeInput","onInsert","length","e","preventDefault","target","React","memo","useSelector","dispatch","useDispatch","useCallback","GlobalStyle","createGlobalStyle","App","TodoContainer","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05d24151.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\r\nconst INSERT = 'todos/INSERT';\r\nconst TOGGLE = 'todos/TOGGLE';\r\nconst REMOVE = 'todos/REMOVE';\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\r\nlet id = 5;\r\nexport const insert = createAction(INSERT, (text) => ({\r\n  id: id++,\r\n  text,\r\n  done: false,\r\n}));\r\nexport const toggle = createAction(TOGGLE, (id) => id);\r\nexport const remove = createAction(REMOVE, (id) => id);\r\n\r\nconst initialState = {\r\n  input: '',\r\n  todos: [\r\n    {\r\n      id: 1,\r\n      text: '프로젝트 생성하기',\r\n      done: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      text: '컴포넌트 스타일링하기',\r\n      done: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      text: 'Redux 적용하기',\r\n      done: false,\r\n    },\r\n    {\r\n      id: 4,\r\n      text: '기능 구현하기',\r\n      done: false,\r\n    },\r\n  ],\r\n};\r\n\r\nconst todos = handleActions(\r\n  {\r\n    [CHANGE_INPUT]: (state, { payload: input }) => ({ ...state, input }),\r\n    [INSERT]: (state, { payload: todo }) => ({\r\n      ...state,\r\n      todos: state.todos.concat(todo),\r\n    }),\r\n    [TOGGLE]: (state, { payload: id }) => ({\r\n      ...state,\r\n      todos: state.todos.map((todo) =>\r\n        todo.id === id ? { ...todo, done: !todo.done } : todo,\r\n      ),\r\n    }),\r\n    [REMOVE]: (state, { payload: id }) => ({\r\n      ...state,\r\n      todos: state.todos.filter((todo) => todo.id !== id),\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default todos;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding: 3rem 2rem 1.5rem 2rem;\r\n  border-bottom: 1px solid #e9ecef;\r\n`;\r\n\r\nconst TodoDate = styled.h1`\r\n  margin: 0;\r\n  font-size: 2.25rem;\r\n  color: #343a40;\r\n`;\r\nconst TodoDay = styled.div`\r\n  margin-top: 0.25rem;\r\n  color: #868e96;\r\n  font-size: 1.3rem;\r\n  font-weight: 400;\r\n`;\r\nconst TodoTasks = styled.div`\r\n  color: #20c997;\r\n  font-size: 1.1rem;\r\n  margin-top: 2rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nfunction TodoHead({ unDoneTasks }) {\r\n  const today = new Date();\r\n  const dayString = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n  const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <TodoDate>{dayString}</TodoDate>\r\n      <TodoDay>{dayName}</TodoDay>\r\n      <TodoTasks>할 일 {unDoneTasks}개 남음</TodoTasks>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default TodoHead;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  color: #dee2e6;\r\n  font-size: 1.5rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n\r\n  display: none;\r\n`;\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding-top: 0.75rem;\r\n  padding-bottom: 0.75rem;\r\n  &:hover {\r\n    ${Remove} {\r\n      display: initial;\r\n    }\r\n  }\r\n`;\r\nconst CheckCircle = styled.div`\r\n  display: flex;\r\n  width: 2rem;\r\n  height: 2rem;\r\n  margin-right: 1.25rem;\r\n\r\n  border-radius: 1rem;\r\n  border: 1px solid #ced4da;\r\n\r\n  font-size: 1.5rem;\r\n\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  cursor: pointer;\r\n\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #38d9a9;\r\n      color: #38d9a9;\r\n    `}\r\n`;\r\nconst Text = styled.div`\r\n  flex: 1;\r\n\r\n  font-size: 1.25rem;\r\n  color: #495057;\r\n\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nfunction TodoItem({ todo, onToggle, onRemove }) {\r\n  return (\r\n    <TodoItemBlock>\r\n      <CheckCircle onClick={() => onToggle(todo.id)} done={todo.done}>\r\n        {todo.done && <MdDone />}\r\n      </CheckCircle>\r\n      <Text done={todo.done}>{todo.text}</Text>\r\n      <Remove>\r\n        <MdDelete onClick={() => onRemove(todo.id)} />\r\n      </Remove>\r\n    </TodoItemBlock>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 1.25rem 2rem;\r\n  padding-bottom: 6rem;\r\n  overflow-y: auto;\r\n`;\r\n\r\nfunction TodoList({ todos, onToggle, onRemove }) {\r\n  return (\r\n    <TodoListBlock>\r\n      {todos.map((todo) => (\r\n        <TodoItem\r\n          todo={todo}\r\n          key={todo.id}\r\n          onToggle={onToggle}\r\n          onRemove={onRemove}\r\n        />\r\n      ))}\r\n    </TodoListBlock>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\n\r\nconst TodoCreateBlock = styled.div``;\r\nconst InsertFormBlock = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding: 2rem 2rem 4.5rem 2rem;\r\n\r\n  border-bottom-left-radius: 1rem;\r\n  border-bottom-right-radius: 1rem;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\nconst Input = styled.input`\r\n  padding: 0.75rem;\r\n  border-radius: 0.25rem;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 1.125rem;\r\n  box-sizing: border-box;\r\n`;\r\nconst CircleButton = styled.button`\r\n  display: flex;\r\n  position: relative;\r\n  width: 80px;\r\n  height: 80px;\r\n  left: 50%;\r\n  bottom: 0;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, 50%);\r\n\r\n  z-index: 5;\r\n  background: #38d9a9;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  transition: 0.125s all ease-in;\r\n\r\n  font-size: 3.75rem;\r\n  color: white;\r\n\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.openInsertForm &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nfunction TodoCreate({ onSubmit, value, onChange }) {\r\n  const [openInsertForm, setOpenInsertForm] = useState(false);\r\n\r\n  const onToggle = () => setOpenInsertForm(!openInsertForm);\r\n\r\n  return (\r\n    <TodoCreateBlock>\r\n      {openInsertForm && (\r\n        <InsertFormBlock>\r\n          <InsertForm onSubmit={onSubmit}>\r\n            <Input\r\n              value={value}\r\n              onChange={onChange}\r\n              autoFocus\r\n              placeholder=\"할 일을 입력 후, Enter를 누르세요\"\r\n            />\r\n          </InsertForm>\r\n        </InsertFormBlock>\r\n      )}\r\n      <CircleButton onClick={onToggle} openInsertForm={openInsertForm}>\r\n        <MdAdd />\r\n      </CircleButton>\r\n    </TodoCreateBlock>\r\n  );\r\n}\r\n\r\nexport default TodoCreate;\r\n","/**\r\n *  todolist 의 레이아웃을 설정\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport TodoHead from './TodoHead';\r\nimport TodoList from './TodoList';\r\nimport TodoCreate from './TodoCreate';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  width: 512px;\r\n  height: 768px;\r\n\r\n  margin: 0 auto;\r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n\r\n  background: #ffffff;\r\n\r\n  border-radius: 1rem;\r\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n`;\r\n\r\nfunction TodoTemplate({\r\n  input,\r\n  todos,\r\n  onChangeInput,\r\n  onInsert,\r\n  onToggle,\r\n  onRemove,\r\n}) {\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    onInsert(input);\r\n    onChangeInput('');\r\n  };\r\n  const onChange = (e) => onChangeInput(e.target.value);\r\n\r\n  const unDoneTasks = todos.filter((todo) => !todo.done).length;\r\n\r\n  return (\r\n    <TodoTemplateBlock>\r\n      <TodoHead unDoneTasks={unDoneTasks} />\r\n      <TodoList todos={todos} onToggle={onToggle} onRemove={onRemove} />\r\n      <TodoCreate onSubmit={onSubmit} value={input} onChange={onChange} />\r\n    </TodoTemplateBlock>\r\n  );\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React, { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeInput, insert, toggle, remove } from '../modules/todos';\r\nimport Todos from '../components/TodoTemplate';\r\n\r\nconst TodosContainer = () => {\r\n  const { input, todos } = useSelector(({ todos }) => ({\r\n    input: todos.input,\r\n    todos: todos.todos,\r\n  }));\r\n  const dispatch = useDispatch();\r\n\r\n  const onChangeInput = useCallback((input) => dispatch(changeInput(input)), [\r\n    dispatch,\r\n  ]);\r\n  const onInsert = useCallback((text) => dispatch(insert(text)), [dispatch]);\r\n  const onToggle = useCallback((id) => dispatch(toggle(id)), [dispatch]);\r\n  const onRemove = useCallback((id) => dispatch(remove(id)), [dispatch]);\r\n\r\n  return (\r\n    <Todos\r\n      input={input}\r\n      todos={todos}\r\n      onChangeInput={onChangeInput}\r\n      onInsert={onInsert}\r\n      onToggle={onToggle}\r\n      onRemove={onRemove}\r\n    />\r\n  );\r\n};\r\n\r\n/**\r\n * connet 함수를 사용하여 컨테이너 컴포넌트를 만들었을 경우,\r\n * 해당 컨테이너 컴포넌트의 부모 컴포넌트가 리렌더링될 떄\r\n * 해당 컨테이너의 props가 바뀌지 않았다면 리렌더링이\r\n * 자동으로 방지되어 성능이 최적화 된다.\r\n *\r\n * 반면 useSelector를 사용하여 리덕스 상태를 조회했을 때는\r\n * 이 최적화 작업이 자동으로 이루어지지 않으므로,\r\n * 성능 최적화를 위해서는 React.memo를 컨테이너 컴포넌트에 사용해주어야 한다.\r\n */\r\nexport default React.memo(TodosContainer);\r\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\n// import TodoTemplate from './components/TodoTemplate';\n// import TodoHead from './components/TodoHead';\n// import TodoList from './components/TodoList';\n// import TodoCreate from './components/TodoCreate';\nimport TodoContainer from './containers/TodoContainer';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <TodoContainer />\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\n\r\nconst rootReducer = combineReducers({\r\n  todos,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport App from './App';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}